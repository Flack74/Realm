// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: users.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, email, password, email_verify_token, created_at, updated_at)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, email, password, email_verified, email_verify_token, password_reset_token, password_reset_expiry, failed_login_attempts, locked_until, created_at, updated_at
`

type CreateUserParams struct {
	ID               uuid.UUID      `json:"id"`
	Email            string         `json:"email"`
	Password         string         `json:"password"`
	EmailVerifyToken sql.NullString `json:"email_verify_token"`
	CreatedAt        sql.NullTime   `json:"created_at"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.queryRow(ctx, q.createUserStmt, createUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.EmailVerifyToken,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerifyToken,
		&i.PasswordResetToken,
		&i.PasswordResetExpiry,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, email, password, email_verified, email_verify_token, password_reset_token, password_reset_expiry, failed_login_attempts, locked_until, created_at, updated_at FROM users WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.queryRow(ctx, q.getUserByEmailStmt, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerifyToken,
		&i.PasswordResetToken,
		&i.PasswordResetExpiry,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, email, password, email_verified, email_verify_token, password_reset_token, password_reset_expiry, failed_login_attempts, locked_until, created_at, updated_at FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.queryRow(ctx, q.getUserByIDStmt, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerifyToken,
		&i.PasswordResetToken,
		&i.PasswordResetExpiry,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByPasswordResetToken = `-- name: GetUserByPasswordResetToken :one
SELECT id, email, password, email_verified, email_verify_token, password_reset_token, password_reset_expiry, failed_login_attempts, locked_until, created_at, updated_at FROM users WHERE password_reset_token = $1
`

func (q *Queries) GetUserByPasswordResetToken(ctx context.Context, passwordResetToken sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.getUserByPasswordResetTokenStmt, getUserByPasswordResetToken, passwordResetToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.EmailVerified,
		&i.EmailVerifyToken,
		&i.PasswordResetToken,
		&i.PasswordResetExpiry,
		&i.FailedLoginAttempts,
		&i.LockedUntil,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const incrementFailedLoginAttempts = `-- name: IncrementFailedLoginAttempts :exec
UPDATE users
SET failed_login_attempts = failed_login_attempts + 1,
    locked_until = CASE
        WHEN failed_login_attempts >= 4 THEN $2
        ELSE locked_until
    END,
    updated_at = $3
WHERE email = $1
`

type IncrementFailedLoginAttemptsParams struct {
	Email       string       `json:"email"`
	LockedUntil sql.NullTime `json:"locked_until"`
	UpdatedAt   sql.NullTime `json:"updated_at"`
}

func (q *Queries) IncrementFailedLoginAttempts(ctx context.Context, arg IncrementFailedLoginAttemptsParams) error {
	_, err := q.exec(ctx, q.incrementFailedLoginAttemptsStmt, incrementFailedLoginAttempts, arg.Email, arg.LockedUntil, arg.UpdatedAt)
	return err
}

const resetFailedLoginAttempts = `-- name: ResetFailedLoginAttempts :exec
UPDATE users
SET failed_login_attempts = 0, locked_until = NULL, updated_at = $2
WHERE email = $1
`

type ResetFailedLoginAttemptsParams struct {
	Email     string       `json:"email"`
	UpdatedAt sql.NullTime `json:"updated_at"`
}

func (q *Queries) ResetFailedLoginAttempts(ctx context.Context, arg ResetFailedLoginAttemptsParams) error {
	_, err := q.exec(ctx, q.resetFailedLoginAttemptsStmt, resetFailedLoginAttempts, arg.Email, arg.UpdatedAt)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users 
SET email = $2, password = $3, email_verified = $4, email_verify_token = $5,
    password_reset_token = $6, password_reset_expiry = $7,
    failed_login_attempts = $8, locked_until = $9, updated_at = $10
WHERE id = $1
`

type UpdateUserParams struct {
	ID                  uuid.UUID      `json:"id"`
	Email               string         `json:"email"`
	Password            string         `json:"password"`
	EmailVerified       sql.NullBool   `json:"email_verified"`
	EmailVerifyToken    sql.NullString `json:"email_verify_token"`
	PasswordResetToken  sql.NullString `json:"password_reset_token"`
	PasswordResetExpiry sql.NullTime   `json:"password_reset_expiry"`
	FailedLoginAttempts sql.NullInt32  `json:"failed_login_attempts"`
	LockedUntil         sql.NullTime   `json:"locked_until"`
	UpdatedAt           sql.NullTime   `json:"updated_at"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.exec(ctx, q.updateUserStmt, updateUser,
		arg.ID,
		arg.Email,
		arg.Password,
		arg.EmailVerified,
		arg.EmailVerifyToken,
		arg.PasswordResetToken,
		arg.PasswordResetExpiry,
		arg.FailedLoginAttempts,
		arg.LockedUntil,
		arg.UpdatedAt,
	)
	return err
}

const verifyEmail = `-- name: VerifyEmail :exec
UPDATE users 
SET email_verified = true, email_verify_token = NULL, updated_at = $2
WHERE email_verify_token = $1 AND email_verified = false
`

type VerifyEmailParams struct {
	EmailVerifyToken sql.NullString `json:"email_verify_token"`
	UpdatedAt        sql.NullTime   `json:"updated_at"`
}

func (q *Queries) VerifyEmail(ctx context.Context, arg VerifyEmailParams) error {
	_, err := q.exec(ctx, q.verifyEmailStmt, verifyEmail, arg.EmailVerifyToken, arg.UpdatedAt)
	return err
}
