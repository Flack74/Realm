// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.createUserStmt, err = db.PrepareContext(ctx, createUser); err != nil {
		return nil, fmt.Errorf("error preparing query CreateUser: %w", err)
	}
	if q.getUserByEmailStmt, err = db.PrepareContext(ctx, getUserByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByEmail: %w", err)
	}
	if q.getUserByIDStmt, err = db.PrepareContext(ctx, getUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByID: %w", err)
	}
	if q.getUserByPasswordResetTokenStmt, err = db.PrepareContext(ctx, getUserByPasswordResetToken); err != nil {
		return nil, fmt.Errorf("error preparing query GetUserByPasswordResetToken: %w", err)
	}
	if q.incrementFailedLoginAttemptsStmt, err = db.PrepareContext(ctx, incrementFailedLoginAttempts); err != nil {
		return nil, fmt.Errorf("error preparing query IncrementFailedLoginAttempts: %w", err)
	}
	if q.resetFailedLoginAttemptsStmt, err = db.PrepareContext(ctx, resetFailedLoginAttempts); err != nil {
		return nil, fmt.Errorf("error preparing query ResetFailedLoginAttempts: %w", err)
	}
	if q.updateUserStmt, err = db.PrepareContext(ctx, updateUser); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateUser: %w", err)
	}
	if q.verifyEmailStmt, err = db.PrepareContext(ctx, verifyEmail); err != nil {
		return nil, fmt.Errorf("error preparing query VerifyEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.createUserStmt != nil {
		if cerr := q.createUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createUserStmt: %w", cerr)
		}
	}
	if q.getUserByEmailStmt != nil {
		if cerr := q.getUserByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByEmailStmt: %w", cerr)
		}
	}
	if q.getUserByIDStmt != nil {
		if cerr := q.getUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByIDStmt: %w", cerr)
		}
	}
	if q.getUserByPasswordResetTokenStmt != nil {
		if cerr := q.getUserByPasswordResetTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getUserByPasswordResetTokenStmt: %w", cerr)
		}
	}
	if q.incrementFailedLoginAttemptsStmt != nil {
		if cerr := q.incrementFailedLoginAttemptsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing incrementFailedLoginAttemptsStmt: %w", cerr)
		}
	}
	if q.resetFailedLoginAttemptsStmt != nil {
		if cerr := q.resetFailedLoginAttemptsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing resetFailedLoginAttemptsStmt: %w", cerr)
		}
	}
	if q.updateUserStmt != nil {
		if cerr := q.updateUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateUserStmt: %w", cerr)
		}
	}
	if q.verifyEmailStmt != nil {
		if cerr := q.verifyEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing verifyEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                               DBTX
	tx                               *sql.Tx
	createUserStmt                   *sql.Stmt
	getUserByEmailStmt               *sql.Stmt
	getUserByIDStmt                  *sql.Stmt
	getUserByPasswordResetTokenStmt  *sql.Stmt
	incrementFailedLoginAttemptsStmt *sql.Stmt
	resetFailedLoginAttemptsStmt     *sql.Stmt
	updateUserStmt                   *sql.Stmt
	verifyEmailStmt                  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                               tx,
		tx:                               tx,
		createUserStmt:                   q.createUserStmt,
		getUserByEmailStmt:               q.getUserByEmailStmt,
		getUserByIDStmt:                  q.getUserByIDStmt,
		getUserByPasswordResetTokenStmt:  q.getUserByPasswordResetTokenStmt,
		incrementFailedLoginAttemptsStmt: q.incrementFailedLoginAttemptsStmt,
		resetFailedLoginAttemptsStmt:     q.resetFailedLoginAttemptsStmt,
		updateUserStmt:                   q.updateUserStmt,
		verifyEmailStmt:                  q.verifyEmailStmt,
	}
}
